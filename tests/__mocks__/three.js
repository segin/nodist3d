const THREE = jest.requireActual('three');

const mockGeometry = {
    dispose: jest.fn(),
    parameters: {
        width: 1,
        height: 1,
        depth: 1,
        radius: 1,
        radiusTop: 1,
        radiusBottom: 1,
        radialSegments: 8,
    },
    clone: jest.fn().mockReturnThis(),
};

const mockMaterial = {
    dispose: jest.fn(),
    clone: jest.fn().mockReturnThis(),
    color: {
        getHex: jest.fn().mockReturnValue(0xffffff),
        set: jest.fn(),
        setHex: jest.fn(),
    },
    map: null,
    normalMap: null,
    roughnessMap: null,
    metalness: 0.5,
    roughness: 0.5,
    side: undefined,
};

const mockMesh = {
    isMesh: true,
    type: 'Mesh',
    name: 'Mesh',
    uuid: 'mock-mesh-uuid',
    position: { x: 0, y: 0, z: 0, set: jest.fn(), copy: jest.fn(), sub: jest.fn() },
    rotation: { x: 0, y: 0, z: 0, set: jest.fn(), copy: jest.fn() },
    scale: { x: 1, y: 1, z: 1, set: jest.fn(), copy: jest.fn() },
    geometry: { ...mockGeometry },
    material: mockMaterial,
    clone: jest.fn().mockReturnThis(),
    add: jest.fn(),
    remove: jest.fn(),
    traverse: jest.fn(),
    getWorldPosition: jest.fn(),
    getWorldQuaternion: jest.fn(),
    updateMatrixWorld: jest.fn(),
    children: [],
    parent: null,
    visible: true,
    matrix: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
    matrixWorld: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
    addEventListener: jest.fn(),
    hasEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
    copy: jest.fn(),
};

const mockGroup = {
    isGroup: true,
    type: 'Group',
    name: 'Group',
    uuid: 'mock-group-uuid',
    position: { x: 0, y: 0, z: 0, set: jest.fn(), copy: jest.fn() },
    rotation: { x: 0, y: 0, z: 0, set: jest.fn() },
    scale: { x: 1, y: 1, z: 1, set: jest.fn() },
    children: [],
    add: jest.fn(),
    remove: jest.fn(),
    clone: jest.fn().mockReturnThis(),
    traverse: jest.fn(),
    getWorldPosition: jest.fn(),
    updateMatrixWorld: jest.fn(),
    parent: null,
    matrix: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
    matrixWorld: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
    addEventListener: jest.fn(),
    hasEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
    copy: jest.fn(),
};

module.exports = {
    ...THREE,
    Scene: jest.fn().mockImplementation(() => ({
        add: jest.fn(),
        remove: jest.fn(),
        children: [],
        isScene: true,
        uuid: 'mock-scene-uuid',
    })),
    WebGLRenderer: jest.fn().mockImplementation(() => ({
        domElement: {
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            style: {},
            clientWidth: 800,
            clientHeight: 600,
            getContext: jest.fn(),
            toDataURL: jest.fn(),
        },
        setSize: jest.fn(),
        setPixelRatio: jest.fn(),
        render: jest.fn(),
    })),
    PerspectiveCamera: jest.fn().mockImplementation(() => ({
        isPerspectiveCamera: true,
        position: { x: 0, y: 0, z: 5, copy: jest.fn(), set: jest.fn() },
        quaternion: { x: 0, y: 0, z: 0, w: 1, clone: jest.fn(), set: jest.fn() },
        aspect: 1,
        updateProjectionMatrix: jest.fn(),
    })),
    BoxGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'BoxGeometry' })),
    SphereGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'SphereGeometry' })),
    CylinderGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'CylinderGeometry' })),
    ConeGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'ConeGeometry' })),
    TorusGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'TorusGeometry' })),
    TorusKnotGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'TorusKnotGeometry' })),
    IcosahedronGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'IcosahedronGeometry' })),
    DodecahedronGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'DodecahedronGeometry' })),
    OctahedronGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'OctahedronGeometry' })),
    PlaneGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'PlaneGeometry' })),
    TubeGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'TubeGeometry' })),
    BufferGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'BufferGeometry' })),
    TextGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'TextGeometry' })),
    FontLoader: jest.fn().mockImplementation(() => ({
        load: jest.fn(),
    })),
    ExtrudeGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'ExtrudeGeometry' })),
    LatheGeometry: jest.fn().mockImplementation(() => ({ ...mockGeometry, type: 'LatheGeometry' })),
    Mesh: jest.fn().mockImplementation(() => ({ ...mockMesh })),
    MeshBasicMaterial: jest.fn().mockImplementation(() => ({ ...mockMaterial })),
    MeshLambertMaterial: jest.fn().mockImplementation(() => ({ ...mockMaterial })),
    MeshStandardMaterial: jest.fn().mockImplementation(() => ({ ...mockMaterial })),
    PointLight: jest.fn().mockImplementation(() => ({ isLight: true, name: 'PointLight', position: { set: jest.fn() } })),
    DirectionalLight: jest.fn().mockImplementation(() => ({
        isLight: true,
        name: 'DirectionalLight',
        position: { set: jest.fn(), normalize: jest.fn(), copy: jest.fn() },
        target: {
            position: { copy: jest.fn() },
            set: jest.fn(),
            clone: jest.fn().mockReturnThis(),
        },
        clone: jest.fn().mockReturnThis(),
    })),
    AmbientLight: jest.fn().mockImplementation(() => ({ isLight: true, name: 'AmbientLight' })),
    Group: jest.fn().mockImplementation(() => ({ ...mockGroup })),
    Vector2: jest.fn(),
    Vector3: jest.fn().mockImplementation(() => ({
        x: 0,
        y: 0,
        z: 0,
        set: jest.fn(),
        copy: jest.fn(),
        add: jest.fn(),
        sub: jest.fn(),
        multiplyScalar: jest.fn(),
        divideScalar: jest.fn(),
        normalize: jest.fn(),
        clone: jest.fn().mockReturnThis(),
    })),
    Raycaster: jest.fn().mockImplementation(() => ({
        setFromCamera: jest.fn(),
        intersectObjects: jest.fn().mockReturnValue([]),
    })),
    EdgesGeometry: jest.fn(),
    LineBasicMaterial: jest.fn(),
    LineSegments: jest.fn(),
    TextureLoader: jest.fn().mockImplementation(() => ({
        load: jest.fn(),
    })),
    DoubleSide: 2,
    Object3D: jest.fn().mockImplementation(() => ({
        position: { x: 0, y: 0, z: 0, set: jest.fn(), copy: jest.fn() },
        rotation: { x: 0, y: 0, z: 0, set: jest.fn(), copy: jest.fn() },
        scale: { x: 1, y: 1, z: 1, set: jest.fn(), copy: jest.fn() },
        add: jest.fn(),
        remove: jest.fn(),
        clone: jest.fn().mockReturnThis(),
        traverse: jest.fn(),
        getWorldPosition: jest.fn(),
        updateMatrixWorld: jest.fn(),
    })),
};
